# Tuples

tuple is a collection which 
- ordered 
- unchangeable
- allow duplicate
- items are indexed

>  items can be of any data type/ and mixed

```py
thistuple = ("apple", "banana", "cherry")
print(thistuple)
```

## len() - for length

## One Item
```py
thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple)) #str
```

## type()

## constructor - tuple()

```py
thistuple = tuple(("apple", "banana", "cherry")) # note the double round-brackets
print(thistuple)
```

## access & exist

use `[]` to access and `if in`

## Update Values

Tuples are unchangeable, or immutable 

:::tip Hole
But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple
:::

```py
x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

print(x)
```

## Add Item

1. convert to list
2. add tuple to tuple

```py
thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y
```

## Delete Item

1. via list
2. del thistupple (del whole tuple)

## Unpack tuple

```py
fruits = ("apple", "banana", "cherry")

(green, yellow, red) = fruits
```

### Use `*`

 will assign values as a list

```py
fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")

(green, yellow, *red) = fruits
#OR
(green, *tropic, red) = fruits
```

## Join 2 Tuples `+`

```py
ple1 = ("a", "b" , "c")
tuple2 = (1, 2, 3)

tuple3 = tuple1 + tuple2
print(tuple3)
```
You can multiply by number
```py
fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2

print(mytuple)
```

## Methods

- count(v) - num of times the val occurs
- index(v) - find a spec value and ret index
