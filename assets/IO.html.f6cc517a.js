import{_ as n,o as s,c as a,f as t}from"./app.72a36726.js";const e={},p=t(`<h1 id="input-and-outout" tabindex="-1"><a class="header-anchor" href="#input-and-outout" aria-hidden="true">#</a> Input and Outout</h1><p>Some of the built-in classes include:</p><table><thead><tr><th>Class</th><th>Definition</th></tr></thead><tbody><tr><td>System.out</td><td>A class that holds functions to display out in a terminal or command prompt application.</td></tr><tr><td>Scanner</td><td>A class used to read input passed into a Java program.</td></tr><tr><td>FileOutputStream</td><td>A class that holds functions to convert byte data into readable text files.</td></tr><tr><td>FileInputStream</td><td>A class that has functions that convert input from files to byte data for a Java program to use.</td></tr></tbody></table><h2 id="printing-using-system-out" tabindex="-1"><a class="header-anchor" href="#printing-using-system-out" aria-hidden="true">#</a> Printing using System.out</h2><p>Printing output in a Java program can be done using the following three commands: System.out.print();, System.out.println(), and System.out.printf()</p><h3 id="system-out-print" tabindex="-1"><a class="header-anchor" href="#system-out-print" aria-hidden="true">#</a> System.out.print()</h3><p>Prints into the same line when a program is running</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Output ext-Output line-numbers-mode"><pre class="language-Output"><code>Hello World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="system-out-println" tabindex="-1"><a class="header-anchor" href="#system-out-println" aria-hidden="true">#</a> System.out.println()</h3><p>prints output to a new line:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Hello
World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="system-out-printf" tabindex="-1"><a class="header-anchor" href="#system-out-printf" aria-hidden="true">#</a> System.out.printf()</h3><p>Allows us to output strings that are formatted in the code using format specifiers. Format specifiers begin with the \u2018%\u2019 sign, followed by the type of variable we want to print. Some examples include %s for a string,%c for a character, and %d for an integer.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> world <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s! Today is Day: %d of your Intermediate Java course!&quot;</span><span class="token punctuation">,</span> world<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Hello World! Today is Day: 1 of your Intermediate Java course!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="the-scanner-class" tabindex="-1"><a class="header-anchor" href="#the-scanner-class" aria-hidden="true">#</a> The Scanner Class</h2><p>The Scanner class is built into Java and is useful for reading input from different sources including user input, and text files.</p><p>We must import the Scanner class</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let\u2019s begin by declaring the Scanner class as a variable that we will call input:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//This is what will allow our program to read user input from the console.</span>
<span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The Scanner class can read different types of values that can be saved into different variable types.</p><table><thead><tr><th>Variable</th><th>Code</th></tr></thead><tbody><tr><td>Int</td><td>int num = input.nextInt();</td></tr><tr><td>Double</td><td>double numDouble = input.nextDouble();</td></tr><tr><td>Byte</td><td>byte numByte = input.nextByte();</td></tr><tr><td>Boolean</td><td>boolean isTrue = input.nextBoolean();</td></tr><tr><td>Long</td><td>long numLong = input.nextLong();</td></tr><tr><td>Short</td><td>short numShort = input.nextShort();</td></tr></tbody></table><p>The Scanner class has many functions, including the ability to validate and convert variables. Some examples include:</p><table><thead><tr><th>Code</th><th>Function</th></tr></thead><tbody><tr><td>input.hasNextLine()</td><td>This function returns a boolean that validates if there is another line in the input of the defined scanner.</td></tr><tr><td>input.hasNextInt()</td><td>This function returns a boolean that validates if there is another int in the input of the defined scanner.</td></tr><tr><td>input.useDelimiter(&quot;,&quot;):</td><td>This function helps us specify what delimiters we want to use. A delimiter is used to separate data units. Delimiters can be especially useful when a program is required to read csv files.</td></tr><tr><td>num.toString()</td><td>This function can be used to convert different variable types to string variables. In this example, we are converting an int to a string.</td></tr></tbody></table><h2 id="file-streams" tabindex="-1"><a class="header-anchor" href="#file-streams" aria-hidden="true">#</a> File Streams</h2><p><code>FileOutputStream</code> is used to output data from a program into a file on your computer, and <code>FileInputStream</code> is used to read from a file. They both read/write bytes, and have built-in functions to convert bytes to different variables.</p><p>We can import them as</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fileinputstream" tabindex="-1"><a class="header-anchor" href="#fileinputstream" aria-hidden="true">#</a> FileInputStream</h3><p>Declare your input stream</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//Option 1: Pass file path/name directly to FileInputStream</span>
<span class="token class-name">FileInputStream</span> input1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// Option 2: Use File object to pass file info to FileInputStream</span>
<span class="token comment">// Save file path that has been passed in by the user into a string variable.</span>
<span class="token class-name">String</span> fileName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Pass path to File object</span>
<span class="token class-name">File</span> inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pass File object to FileOutputSteam</span>
<span class="token class-name">FileInputStream</span> input2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read your file</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Counter variable to loop through the file</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// A loop to access each character</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> inputFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
  <span class="token comment">// Printing each character as it&#39;s reached</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Close the file</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fileoutputstream" tabindex="-1"><a class="header-anchor" href="#fileoutputstream" aria-hidden="true">#</a> FileOutputStream</h3><p>Declare your output stream.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//Option 1: Pass file path/name directly to FileOutputStream</span>
<span class="token class-name">FileOutputStream</span> output1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// Option 2: Use File object to pass file info to FileOutputStream</span>
<span class="token comment">// Save file path that has been passed in by the user into a string variable.</span>
<span class="token class-name">String</span> fileName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Pass path to File object</span>
<span class="token class-name">File</span> outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pass File object to FileOutputSteam</span>
<span class="token class-name">FileOutputStream</span> output2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Write to your file.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Declare FileOutputSteam</span>
<span class="token class-name">FileOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// Declare statement</span>
<span class="token class-name">String</span> statement <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
 
<span class="token comment">// Convert statement to bytes.</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> statementBytes <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// Option 1:</span>
<span class="token comment">// Write all contents to file</span>
output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>statementBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// You can do this more succinctly using</span>
output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>statement<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// Option 2:</span>
<span class="token comment">// If you want to write specific bytes to a file you may choose to use the following statement</span>
<span class="token comment">// output.write(byte[] bytes, int startingIndex, int endingIndex);</span>
output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>statementBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Close the file.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ioexceptions" tabindex="-1"><a class="header-anchor" href="#ioexceptions" aria-hidden="true">#</a> IOExceptions</h2><p><code>IOExceptions</code> are exceptions that are related to input and/or output in a program and can be classified as checked exceptions.</p><p>Some examples of when IOExceptions occur include:</p><ul><li>Failed attempts at trying to access a file.</li><li>The end of a file has been reached.</li><li>The file a program is attempting to access cannot be found.</li><li>An input/output operation has been interrupted.</li></ul><p>To start off we must first import the IOExceptions class into our program using</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We may choose to print an error using System.out.println() or run a new instance of the program.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Declare FileOutputSteam</span>
<span class="token class-name">FileOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token class-name">String</span> statement <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
 
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Convert statement to bytes.</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> statementBytes <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token comment">// Write all contents to file</span>
  output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>statementBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token comment">// Close file</span>
  output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Handle exception</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;There has been an IO exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of a try-catch block, we can also use the keyword throws so that the exception is handled by the program itself.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> \u2026 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","IO.html.vue"]]);export{r as default};
