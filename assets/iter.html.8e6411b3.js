import{_ as n,o as s,c as a,f as t}from"./app.f0877d34.js";const e={},p=t(`<h1 id="iterators" tabindex="-1"><a class="header-anchor" href="#iterators" aria-hidden="true">#</a> Iterators</h1><p>An iterator is an object that contains a countable number of values.</p><p>An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.</p><p>Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods <strong>iter</strong>() and <strong>next</strong>().</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>mytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">)</span>
myit <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mytuple<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myit<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myit<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myit<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> Loop</h2><p>The for loop actually creates an iterator object and executes the next() method for each loop</p><p>We can also use a for loop to iterate through an iterable object:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>mytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span> mytuple<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-an-iterator" tabindex="-1"><a class="header-anchor" href="#create-an-iterator" aria-hidden="true">#</a> Create an Iterator</h2><p>To prevent the iteration to go on forever, we can use the StopIteration statement.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> self

  <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>
      x <span class="token operator">=</span> self<span class="token punctuation">.</span>a
      self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>
      <span class="token keyword">return</span> x
    <span class="token keyword">else</span><span class="token punctuation">:</span>
      <span class="token keyword">raise</span> StopIteration

myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>
myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stopiteration" tabindex="-1"><a class="header-anchor" href="#stopiteration" aria-hidden="true">#</a> StopIteration</h2>`,13),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","iter.html.vue"]]);export{r as default};
