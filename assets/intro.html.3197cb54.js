import{_ as n,o as a,c as s,f as e}from"./app.3e3274b2.js";const t={},o=e(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><h2 id="autimatic-setup" tabindex="-1"><a class="header-anchor" href="#autimatic-setup" aria-hidden="true">#</a> Autimatic Setup</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npx create-next-app@latest
# or
yarn create next-app
# or
pnpm create next-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for TypeScript use the --typescript flag</p></blockquote><ul><li><code>pages</code> - Associated with a route based on their file name. For example pages/about.js is mapped to /about</li><li><code>public</code> - Stores static assets such as images, fonts, etc. Files inside public directory can then be referenced by your code starting from the base URL (/).</li></ul><h2 id="pages" tabindex="-1"><a class="header-anchor" href="#pages" aria-hidden="true">#</a> Pages</h2><p>In Next.js, a page is a React Component exported from a .js, .jsx, .ts, or .tsx file in the pages directory</p><p>Next.js supports pages with dynamic routes. For example, if you create a file called pages/posts/[id].js, then it will be accessible at posts/1, posts/2, etc</p><h2 id="pre-rendering" tabindex="-1"><a class="header-anchor" href="#pre-rendering" aria-hidden="true">#</a> Pre-rendering</h2><p>By default, Next.js pre-renders every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.</p><p>Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called hydration.)</p><h3 id="two-forms-of-pre-rendering" tabindex="-1"><a class="header-anchor" href="#two-forms-of-pre-rendering" aria-hidden="true">#</a> Two forms of Pre-rendering</h3><ul><li><code>Static Generation (Recommended)</code>: The HTML is generated at build time and will be reused on each request.</li><li><code>Server-side Rendering</code>: The HTML is generated on each request.</li></ul><p>The difference is in when it generates the HTML for a page.</p><blockquote><p>We recommend using Static Generation over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance</p></blockquote><p>We recommend using Static Generation over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance</p><h2 id="static-generation-without-data" tabindex="-1"><a class="header-anchor" href="#static-generation-without-data" aria-hidden="true">#</a> Static Generation without data</h2><p>By default, Next.js pre-renders pages using Static Generation without fetching data.</p><h2 id="static-generation-with-data" tabindex="-1"><a class="header-anchor" href="#static-generation-with-data" aria-hidden="true">#</a> Static Generation with data</h2><p>Some pages require fetching external data for pre-rendering. There are two scenarios</p><h3 id="_1-scenario-1-your-page-content-depends-on-external-data" tabindex="-1"><a class="header-anchor" href="#_1-scenario-1-your-page-content-depends-on-external-data" aria-hidden="true">#</a> 1. Scenario 1: Your page content depends on external data</h3><p>To fetch this data on pre-render, Next.js allows you to export an async function called getStaticProps from the same file. This function gets called at build time and lets you pass fetched data to the page&#39;s props on pre-render.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render posts...</span>
<span class="token punctuation">}</span>

<span class="token comment">// This function gets called at build time</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call an external API endpoint to get posts</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../posts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// By returning { props: { posts } }, the Blog component</span>
  <span class="token comment">// will receive \`posts\` as a prop at build time</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Blog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-your-page-paths-depend-on-external-data" tabindex="-1"><a class="header-anchor" href="#_2-your-page-paths-depend-on-external-data" aria-hidden="true">#</a> 2. Your page paths depend on external data</h3><p>Next.js allows you to create pages with dynamic routes. For example, you can create a file called pages/posts/[id].js to show a single blog post based on id. This will allow you to show a blog post with id: 1 when you access posts/1</p><p>Next.js lets you export an async function called getStaticPaths from a dynamic page (pages/posts/[id].js in this case). This function gets called at build time and lets you specify which paths you want to pre-render.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// This function gets called at build time</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call an external API endpoint to get posts</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../posts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Get the paths we want to pre-render based on posts</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> post<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// We&#39;ll pre-render only these paths at build time.</span>
  <span class="token comment">// { fallback: false } means other routes should 404.</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="server-side-rendering" tabindex="-1"><a class="header-anchor" href="#server-side-rendering" aria-hidden="true">#</a> Server-side Rendering</h2><blockquote><p>&quot;SSR&quot; or &quot;Dynamic Rendering&quot;.</p></blockquote><p>The page HTML is generated on each request.</p><p>Export an async function called <code>getServerSideProps</code>. This function will be called by the server on every request.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render data...</span>
<span class="token punctuation">}</span>

<span class="token comment">// This gets called on every request</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Fetch data from external API</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../data</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Pass data to the page via props</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, getServerSideProps is similar to getStaticProps, but the difference is that getServerSideProps is run on every request instead of on build time</p>`,33),p=[o];function i(c,r){return a(),s("div",null,p)}const d=n(t,[["render",i],["__file","intro.html.vue"]]);export{d as default};
