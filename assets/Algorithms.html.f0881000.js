import{_ as e,o as t,c as a,f as o}from"./app.0306538f.js";const n={},r=o('<h1 id="algorithms-analysis" tabindex="-1"><a class="header-anchor" href="#algorithms-analysis" aria-hidden="true">#</a> Algorithms Analysis</h1><p>Data structures and algorithms looks at how data for computer programs can best be represented and processed.</p><p>The two main resources to consider are <code>time</code> and <code>memory</code>. The resource to optimize for depends on the application and the computing system.</p><p>what we really care about is the growth rate of resource consumption with respect to the data size.</p><h2 id="time-resource" tabindex="-1"><a class="header-anchor" href="#time-resource" aria-hidden="true">#</a> Time Resource</h2><p>One way that we can measure the amount of time required by an algorithm is to measure how many operations it performs.<br> When doing this, we make the assumption that every operation has the same time cost.</p><h2 id="memory-resource" tabindex="-1"><a class="header-anchor" href="#memory-resource" aria-hidden="true">#</a> Memory Resource</h2><p>This is not calculated by operation count, but we can still make a calculation on this based on variable declarations, dynamically allocated memory etc.</p><h2 id="growth-rates" tabindex="-1"><a class="header-anchor" href="#growth-rates" aria-hidden="true">#</a> Growth Rates</h2><p>It is about understanding the growth in resource consumption as the amount of data increases</p><p>From most efficient to least efficient:</p><ol><li>Constant (y = 1)</li><li>Logarithmic (y = logn)</li><li>Linear (y = n)</li><li>Loglinear (y = nlogn)</li><li>Quadratic (y = n^2)</li><li>Cubic (y = n^3)</li><li>Exponential (y = 2^n)</li></ol><h2 id="asymptotic-notation" tabindex="-1"><a class="header-anchor" href="#asymptotic-notation" aria-hidden="true">#</a> Asymptotic notation</h2><ul><li>are formal notational methods for stating the upper and lower bounds of a function.</li></ul><blockquote><p>These are:<br> O(f(n)) - Big-O</p><p>o(f(n)) - Little-O</p><p>\u03A9(f(n)) - Omega</p><p>\u0398(f(n)) - Theta</p></blockquote><p>&quot;T(n) is O(f(n))&quot; iff for some constants c and n0, T(n) &lt;= cf(n) for all n &gt;= n0 =&gt; f(n) describes the <strong>upper bound</strong> for T(n)<br> &quot;T(n) is \u03A9(f(n))&quot; iff for some constants c and n0, T(n) &lt;= cf(n) for all n &lt;= n0 =&gt; f(n) describes the <strong>lower bound</strong> for T(n)<br> &quot;T(n) is \u0398(f(n))&quot; f(n) describes the <strong>exact bound</strong> for T(n)<br> &quot;T(n) is o(f(n))&quot; f(n) describes the <strong>upper bound</strong> for T(n) where T(n) will <strong>never actually be reached</strong></p><h2 id="recursion" tabindex="-1"><a class="header-anchor" href="#recursion" aria-hidden="true">#</a> Recursion</h2><div class="custom-container warning"><p class="custom-container-title">Runtime Stack</p><p>The runtime stack is a structure that keeps track of function calls and local variables as the program runs. Each time a function is called, it gets added to the top of the runtime stack along with variables and parameters local to that function. Variables below it become inaccessible. When a function returns, the function along with it&#39;s local variables are popped off the stack allowing access to its caller and its callers variables.</p></div>',18),i=[r];function s(c,l){return t(),a("div",null,i)}const d=e(n,[["render",s],["__file","Algorithms.html.vue"]]);export{d as default};
