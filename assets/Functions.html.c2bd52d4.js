import{_ as n,o as a,c as s,f as t}from"./app.df0ac280.js";const e={},o=t(`<h1 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h1><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from a function&quot;</span> <span class="token operator">+</span> fname<span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arguments-args" tabindex="-1"><a class="header-anchor" href="#arguments-args" aria-hidden="true">#</a> Arguments(args)</h2><p>A parameter is the variable listed inside the parentheses in the function definition.</p><p>An argument is the value that is sent to the function when it is called.</p><h3 id="num-of-args" tabindex="-1"><a class="header-anchor" href="#num-of-args" aria-hidden="true">#</a> Num of args</h3><ol><li>By default, a function must be called with the correct number of arguments =&gt; error</li><li>Arbitraray Arguments - *args</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token operator">*</span>kids<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The youngest child is &quot;</span> <span class="token operator">+</span> kids<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span><span class="token string">&quot;Emil&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tobias&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Linus&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keyword-arguments" tabindex="-1"><a class="header-anchor" href="#keyword-arguments" aria-hidden="true">#</a> Keyword Arguments</h2><p>send arguments with the key = value syntax</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span>child3<span class="token punctuation">,</span> child2<span class="token punctuation">,</span> child1<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The youngest child is &quot;</span> <span class="token operator">+</span> child3<span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span>child1 <span class="token operator">=</span> <span class="token string">&quot;Emil&quot;</span><span class="token punctuation">,</span> child2 <span class="token operator">=</span> <span class="token string">&quot;Tobias&quot;</span><span class="token punctuation">,</span> child3 <span class="token operator">=</span> <span class="token string">&quot;Linus&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Keyword Arguments are often shortened to kwargs</p></div><h2 id="arbitrary-keyword-arguments-kwargs" tabindex="-1"><a class="header-anchor" href="#arbitrary-keyword-arguments-kwargs" aria-hidden="true">#</a> Arbitrary Keyword Arguments - **kwargs</h2><p>If you do not know how many keyword arguments that will be passed into your function. This way the function will receive a dictionary of arguments</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kid<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;His last name is &quot;</span> <span class="token operator">+</span> kid<span class="token punctuation">[</span><span class="token string">&quot;lname&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span>fname <span class="token operator">=</span> <span class="token string">&quot;Tobias&quot;</span><span class="token punctuation">,</span> lname <span class="token operator">=</span> <span class="token string">&quot;Refsnes&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="default-parameter" tabindex="-1"><a class="header-anchor" href="#default-parameter" aria-hidden="true">#</a> Default Parameter</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span>country <span class="token operator">=</span> <span class="token string">&quot;Norway&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am from &quot;</span> <span class="token operator">+</span> country<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pass-statement" tabindex="-1"><a class="header-anchor" href="#pass-statement" aria-hidden="true">#</a> pass Statement</h2><h2 id="python-also-accepts-function-recursion" tabindex="-1"><a class="header-anchor" href="#python-also-accepts-function-recursion" aria-hidden="true">#</a> Python also accepts function recursion</h2><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h2><p>A lambda function is a small anonymous function.</p><p>A lambda function can take any number of arguments, but can only have one expression</p><blockquote><p>lambda arguments : expression</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Use lambda functions when an anonymous function is required for a short period of time</p></div>`,24),i=[o];function p(c,u){return a(),s("div",null,i)}const l=n(e,[["render",p],["__file","Functions.html.vue"]]);export{l as default};
