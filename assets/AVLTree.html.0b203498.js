import{_ as e,o as t,c as a,f as i}from"./app.72bfee78.js";const r={},n=i('<h1 id="avl-trees" tabindex="-1"><a class="header-anchor" href="#avl-trees" aria-hidden="true">#</a> AVL Trees</h1><p>An AVL tree does not create a perfectly balanced binary search trees. Instead it creates a height balanced binary search trees.</p><blockquote><p>A tree is perfectly balanced if it is empty or the number of nodes in each subtree differ by no more than 1</p></blockquote><div class="custom-container tip"><p class="custom-container-title">Time</p><ul><li>search through a height balanced tree is O(log n).</li><li>insert/delete can also be done in O(log n) time.</li></ul></div><h2 id="height-balance" tabindex="-1"><a class="header-anchor" href="#height-balance" aria-hidden="true">#</a> Height Balance</h2><blockquote><p>height balance = height of right - height of left</p><p>of node subtree subtree</p></blockquote><h2 id="insertion" tabindex="-1"><a class="header-anchor" href="#insertion" aria-hidden="true">#</a> Insertion</h2><p>:::damger Note The adjustment must happen from the bottom up :::</p><ul><li>Find the appropriate empty subtree where new value should go by comparing with values in the tree.</li><li>Create a new node at that empty subtree.</li><li>New node is a leaf and thus will have a height balance of 0</li><li>go back to the parent and adjust the height balance.</li><li>If the height balance of a node is ever more than 1 or less than -1, the subtree at that node will have to go through a rotation in order to fix the height balance. The process continues until we are back to the root.</li></ul>',9),o=[n];function h(l,s){return t(),a("div",null,o)}const d=e(r,[["render",h],["__file","AVLTree.html.vue"]]);export{d as default};
