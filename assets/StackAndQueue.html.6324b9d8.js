import{_ as t,o as e,c as a,f as s}from"./app.ecf9d4d8.js";const i={},o=s('<h1 id="stacks-and-queues" tabindex="-1"><a class="header-anchor" href="#stacks-and-queues" aria-hidden="true">#</a> Stacks and Queues</h1><p>A <code>stack</code> is a kind of list where items are always added to the front and removed from the front. Thus, a stack is a First In, Last Out (FILO) structure.</p><p><code>Queues</code> like stacks are a special kind of list. In the case of a queue, items are added to the back and removed from the front. In other words a queue is a First In First Out (FIFO) structure. A queue is essentially a line up.</p><h2 id="operations" tabindex="-1"><a class="header-anchor" href="#operations" aria-hidden="true">#</a> Operations</h2><p>Stacks and queues have the ability to do the following:</p><table><thead><tr><th>Operation</th><th>Stack</th><th>Queue</th></tr></thead><tbody><tr><td>add an item</td><td>push</td><td>enqueue</td></tr><tr><td>remove an item</td><td>pop</td><td>dequeue</td></tr><tr><td>access the &quot;next&quot; item to be removed</td><td>top</td><td>front</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Stacks and Queues are NOT for general storage. They are used to track ordering. Any other features other than the 3 above must be secondary.</p></div><p>Applications of stacks and queues typically involve tracking the ordering of a set of values.<br> Some examples:</p><ul><li>bracket checking (stack)</li><li>breadthfirst tree traversals (queue)</li><li>infix to postfix expression (stack)</li><li>postfix expression calculation (stack)</li></ul><h2 id="stack-implementaiton" tabindex="-1"><a class="header-anchor" href="#stack-implementaiton" aria-hidden="true">#</a> Stack Implementaiton</h2><blockquote><p>As a stack is essentially a list with a restriction on the operations of a list</p></blockquote><p>2 general ways to implement a stack:</p><ol><li>an array</li><li>a linked list</li></ol><p>Recall that the operations are as follows:</p><ul><li>push - add a new item to the stack</li><li>pop - removes top item from the stack</li><li>initialize - create an empty stack</li><li>isEmpty - tests for whether or not stack is empty</li><li>isFull - tests to see if stack is full and cannot grow (not always needed)</li><li>top - looks at value of the top item but do not remove it</li></ul>',15),r=[o];function n(l,d){return e(),a("div",null,r)}const u=t(i,[["render",n],["__file","StackAndQueue.html.vue"]]);export{u as default};
