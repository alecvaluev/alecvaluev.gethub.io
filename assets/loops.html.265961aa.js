import{_ as n,o as s,c as a,f as e}from"./app.df0ac280.js";const t={},o=e(`<h1 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h1><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> If...else</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">200</span>
b <span class="token operator">=</span> <span class="token number">33</span>

<span class="token keyword">if</span> b <span class="token operator">&gt;</span> a<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;b is greater than a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a and b are equal&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a is greater than b&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shorthand" tabindex="-1"><a class="header-anchor" href="#shorthand" aria-hidden="true">#</a> Shorthand</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a is greater than b&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="short-hand-if-else" tabindex="-1"><a class="header-anchor" href="#short-hand-if-else" aria-hidden="true">#</a> Short Hand If ... Else</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ternary-operators-conditional-expressions" tabindex="-1"><a class="header-anchor" href="#ternary-operators-conditional-expressions" aria-hidden="true">#</a> Ternary Operators / Conditional Expressions</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">==</span> b <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pass-statement" tabindex="-1"><a class="header-anchor" href="#pass-statement" aria-hidden="true">#</a> <code>pass</code> Statement</h3><p>if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> b <span class="token operator">&gt;</span> a<span class="token punctuation">:</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h2><h3 id="break-continue-statement" tabindex="-1"><a class="header-anchor" href="#break-continue-statement" aria-hidden="true">#</a> <code>break</code>/<code>continue</code> Statement</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
    <span class="token keyword">break</span> <span class="token comment"># continue</span>
  i <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="else-statement" tabindex="-1"><a class="header-anchor" href="#else-statement" aria-hidden="true">#</a> <code>else</code> Statement</h3><p>can run a block of code once when the condition no longer is true:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  i <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;i is no longer less than 6&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h2><h3 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue" aria-hidden="true">#</a> <code>break</code>/<code>continue</code></h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">break</span> <span class="token comment">#continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range()</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):</p><h3 id="else" tabindex="-1"><a class="header-anchor" href="#else" aria-hidden="true">#</a> <code>else</code></h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Finally finished!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Note</p><p>The else block will NOT be executed if the loop is stopped by a break statement.</p></div><h3 id="pass" tabindex="-1"><a class="header-anchor" href="#pass" aria-hidden="true">#</a> <code>pass</code></h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,29),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","loops.html.vue"]]);export{d as default};
