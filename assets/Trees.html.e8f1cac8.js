import{_ as n,o as s,c as a,f as e}from"./app.d4c5faad.js";const t="/images/cs/bst3.png",o="/images/cs/bst10.png",p={},c=e('<h1 id="trees" tabindex="-1"><a class="header-anchor" href="#trees" aria-hidden="true">#</a> Trees</h1><p>Trees are typically implemented using a Node/link data structure like that of a linked list.</p><blockquote><p>It has the ability to classify data and separate it reducing the overhead of search.</p></blockquote><h2 id="terminology" tabindex="-1"><a class="header-anchor" href="#terminology" aria-hidden="true">#</a> Terminology</h2><ul><li><code>Node</code>: the thing that store the data within the tree . (each circle in the above diagram is a node)</li><li><code>Root Node</code>: the top most node from which all other nodes come from. A is the root node of the tree.</li><li><code>Subtree</code>: Some portion of the entire tree, includes a node (the root of the subtree) and every node that goes downwards from there. A is the root of the entire tree. B is the root of the subtree containing B,D,E and F</li><li><code>Empty trees</code>: A tree with no nodes</li><li><code>Leaf Node</code>: A node with only empty subtrees (no children) Ex. D,E,F,I,J,and G are all leaf nodes</li><li><code>Children</code>: the nodes that is directly 1 link down from a node is that node&#39;s child node. Ex. B is the child of A. I is the child of H</li><li><code>Parent</code> the node that is directly 1 link up from a node. Ex. A is parent of B. H is the parent of I</li><li><code>Sibling</code>: All nodes that have the same parent node are siblings Ex. E and F are siblings of D but H is not</li><li><code>Ancestor</code>: All nodes that can be reached by moving only in an upward direction in the tree. Ex. C, A and H are all ancestors of I but G and B are not.</li><li><code>Descendants</code> or <code>Successors</code> of a node are nodes that can be reached by only going down in the tree. Ex. Descendants of C are G,H,I and J</li><li><code>Depth</code>: Distance from root node of tree. Root node is at depth 0. B and C are at depth 1. Nodes at depth 2 are D,E,F,G and H. Nodes at depth 3 are I and J</li><li><code>Height</code>: Total number of nodes from root to furthest leaf. Our tree has a height of 4.</li><li><code>Path</code>: Set of branches taken to connect an ancestor of a node to the node. Usually described by the set of nodes encountered along the path.</li><li><code>Binary tree</code>: A binary tree is a tree where every node has 2 subtrees that are also binary trees. The subtrees may be empty. Each node has a left child and a right child. Our tree is NOT a binary tree because B has 3 children.</li></ul><h2 id="binary-search-tree-bst" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-bst" aria-hidden="true">#</a> Binary Search Tree (BST)</h2><p>Binary trees where all values in the left subtree &lt; in the right subtree.</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>allows us to quickly perform a search on a linking structure</p></div><p><img src="'+t+'" alt="binary-tree"></p><h3 id="insertion" tabindex="-1"><a class="header-anchor" href="#insertion" aria-hidden="true">#</a> Insertion</h3><blockquote><p>To insert into a binary search tree, we must maintain the nodes in sorted order.</p></blockquote><h4 id="removal" tabindex="-1"><a class="header-anchor" href="#removal" aria-hidden="true">#</a> Removal</h4><blockquote><p>we must be sure to link up the subtree(s) of the node properly</p></blockquote><h2 id="traversals" tabindex="-1"><a class="header-anchor" href="#traversals" aria-hidden="true">#</a> Traversals</h2><blockquote><p>As it goes through each node exactly 1 time, the runtime should not exceed O(n) Examples of traversal: print, copy, destroy the structure</p></blockquote><p>Types of traversal:</p><ul><li>depth first,</li><li>breadfirst</li></ul><h2 id="depth-first-traversals" tabindex="-1"><a class="header-anchor" href="#depth-first-traversals" aria-hidden="true">#</a> Depth First Traversals</h2><p>3 ordering methods for depth first traversals:</p><p><img src="'+o+`" alt="binary-tree"></p><ol><li>preorder <ul><li>visit a node</li><li>visit its left subtree</li><li>visit its right subtree</li></ul></li></ol><blockquote><p>4, 2, 1, 3, 8, 6, 5, 7, 12, 11, 9, 10</p></blockquote><ol start="2"><li>inorder <ul><li>visit its left subtree</li><li>visit a node</li><li>visit its right subtre</li></ul></li></ol><blockquote><p>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 (resutls in sorted order)</p></blockquote><ol start="3"><li>postorde <ul><li>visit its left subtree</li><li>visit its right subtree</li><li>visit a node</li></ul></li></ol><blockquote><p>1, 3, 2, 5, 7, 6, 10, 9, 11, 12, 8, 4 (used to destroy)</p></blockquote><p>-PreOrder</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">preOrderPrint</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node<span class="token operator">*</span> subtree<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        <span class="token comment">//base case is we have an empty tree... in that case we do nothing</span>
        <span class="token comment">//and exit the function</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>subtree<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token comment">//print value in current node</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> subtree<span class="token operator">-&gt;</span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            
            <span class="token comment">//print left subtree</span>
            <span class="token function">preOrderPrint</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//print right subtree</span>
            <span class="token function">preOrderPrint</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">void</span> <span class="token function">preOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token function">preOrderPrint</span><span class="token punctuation">(</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>InOrder</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">inOrderPrint</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node<span class="token operator">*</span> subtree<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        <span class="token comment">//base case is we have an empty tree... in that case we do nothing</span>
        <span class="token comment">//and exit the function</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>subtree<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            
            <span class="token comment">//values in left_ are smaller, we need to print them all first</span>
            <span class="token function">inOrderPrint</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//print value in current node</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> subtree<span class="token operator">-&gt;</span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

            <span class="token comment">//values in right_ are bigger, we need to print them all after we</span>
            <span class="token comment">//print current node</span>
            <span class="token function">inOrderPrint</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">void</span> <span class="token function">inOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token function">inOrderPrint</span><span class="token punctuation">(</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>PostOrder (Destructor)</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> subtree<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//base case is we have an empty tree... in that case we do nothing</span>
        <span class="token comment">//and exit the function</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>subtree<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">destroy</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">destroy</span><span class="token punctuation">(</span>subtree<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span> subtree<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">~</span><span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">destroy</span><span class="token punctuation">(</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="breadth-first-traversal" tabindex="-1"><a class="header-anchor" href="#breadth-first-traversal" aria-hidden="true">#</a> Breadth-First Traversal</h2><blockquote><p>going through all nodes from the root, then all its children then all of its children&#39;s children, etc. level by level</p></blockquote><blockquote><p>4, 2, 8, 1, 3, 6, 12, 5, 7, 11, 9, 10</p></blockquote><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><ul><li>binary search tree is made up of nodes</li><li>Each node can have a left or right child</li><li>Empty trees are represented as nullptrs</li><li>data stored in the nodes must be of some type that is comparable</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
        T data_<span class="token punctuation">;</span>
        Node<span class="token operator">*</span> left_<span class="token punctuation">;</span>
        Node<span class="token operator">*</span> right_<span class="token punctuation">;</span>
        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Node<span class="token operator">*</span> left<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> Node<span class="token operator">*</span> right<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            data_<span class="token operator">=</span>data<span class="token punctuation">;</span>
            left_<span class="token operator">=</span>left<span class="token punctuation">;</span>
            right_<span class="token operator">=</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//single data member pointing to root of tree</span>
    Node<span class="token operator">*</span> root_<span class="token punctuation">;</span> 
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        root_<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">breadthFirstPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">inOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">preOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> Insert</h3><p>(iteration ver)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root_<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            root_<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">bool</span> isInserted<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//set to true when once we insert the node</span>
            Node<span class="token operator">*</span> curr<span class="token operator">=</span>root_<span class="token punctuation">;</span>        <span class="token comment">//used to iterate through nodes</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isInserted<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">&lt;</span> curr<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//data belongs in left subtree because it is </span>
                    <span class="token comment">//smaller than current node</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">//there is a node to the left so go left</span>
                        curr<span class="token operator">=</span>curr<span class="token operator">-&gt;</span>left_<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token comment">//there isn&#39;t a node to left</span>
                        <span class="token comment">//create a node to the left</span>
                        curr<span class="token operator">-&gt;</span>left_<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        isInserted<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token comment">//data belongs in right subtree.</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">//there is a node to the right so go right</span>
                        curr<span class="token operator">=</span>curr<span class="token operator">-&gt;</span>right_<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token comment">//there isn&#39;t a node to right</span>
                        <span class="token comment">//create a node to the right</span>
                        curr<span class="token operator">-&gt;</span>right_<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        isInserted<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(recursive ver)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">&amp;</span> subtree<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//NOTE: the &amp; after Node* is really important for this.  It makes</span>
        <span class="token comment">//subtree another name for whatever you pass in.  For example, if</span>
        <span class="token comment">//in the initial call from non-recursive insert(), we pass in root_</span>
        <span class="token comment">//subtree is actually another name for root_ itself.  Not just a copy </span>
        <span class="token comment">//of data in the root.  This means that when we change subtree, we</span>
        <span class="token comment">//are actually changing root.</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>subtree<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//if tree is empty, make subtree point to the new node</span>
            subtree<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> subtree<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//if data is smaller than data in subtree&#39;s root</span>
            <span class="token comment">//insert it to the left.</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>subtree<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">//otherwise its bigger so we insert it into the right subtree</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>subtree<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> Search</h3><div class="custom-container danger"><p class="custom-container-title">Note</p><p>should never look at the entire tree</p></div><p>(iteration ver)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> curr<span class="token operator">=</span>root_<span class="token punctuation">;</span>    <span class="token comment">//used  to iterate through tree        </span>
        <span class="token keyword">bool</span> found<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//true if we find it false if we haven&#39;t yet</span>

        <span class="token comment">//loop until we either find it or we have no more tree</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>found <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">==</span>curr<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                found<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">&lt;</span> curr<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                curr<span class="token operator">=</span>curr<span class="token operator">-&gt;</span>left_<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                curr<span class="token operator">=</span>curr<span class="token operator">-&gt;</span>right_<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span>  found<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(recursive)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">*</span> subtree<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        <span class="token keyword">bool</span> rc<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">//if it tree is empty, the if is skipped and we return false</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>subtree <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> subtree<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//base case 2: we find it in the root of subtree</span>
                rc<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">&lt;</span> subtree<span class="token operator">-&gt;</span>data_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//data is smaller than that stored in root.  If we find it,</span>
                <span class="token comment">//it will be in left subtree, so we call search to see if its</span>
                <span class="token comment">//there and return the result</span>
                rc<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>subtree<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">//otherwise its bigger, use the search() function</span>
                <span class="token comment">//to see if its in right subtree and return the result</span>
                rc<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>subtree<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        <span class="token comment">//call and return result from recursive search() function</span>
        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="breadth-first-print" tabindex="-1"><a class="header-anchor" href="#breadth-first-print" aria-hidden="true">#</a> Breadth First Print</h3><blockquote><p>use the <strong>queue</strong> data structure to order what nodes to deal with next</p></blockquote><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">breadthFirstPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
        Queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">&gt;</span> theNodes<span class="token punctuation">;</span>  <span class="token comment">//we assume the queue class has these functions</span>
                                <span class="token comment">//enqueue(), dequeue(), front(), isEmpty()</span>
        <span class="token comment">//prime queue</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root_<span class="token punctuation">)</span><span class="token punctuation">{</span>
            theNodes<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>root_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//while we have nodes to deal with</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>theNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//deal with first node and remove it from queue</span>
            Node<span class="token operator">*</span> curr<span class="token operator">=</span>theNodes<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            theNodes<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//if the current node has a left child add it to queue</span>
                theNodes<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//if the current node has a right child add it to queue</span>
                theNodes<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>right_<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//print the current node&#39;s data</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> curr<span class="token operator">-&gt;</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),i=[c];function l(r,u){return s(),a("div",null,i)}const k=n(p,[["render",l],["__file","Trees.html.vue"]]);export{k as default};
